// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  restaurant     Restaurant?
  deliveryPerson DeliveryPerson?
  addresses      Address[]
  paymentMethods PaymentMethod[]
  orders         Order[]         @relation("CustomerOrders")
  notifications  Notification[]
  reviews        Review[]

  @@map("users")
}

model Restaurant {
  id              String   @id @default(uuid())
  userId          String   @unique @map("user_id")
  name            String
  description     String?
  phone           String
  email           String   @unique
  addressId       String   @unique @map("address_id")
  imageUrl        String?  @map("image_url")
  isActive        Boolean  @default(true) @map("is_active")
  deliveryFee     Int      @map("delivery_fee")
  deliveryTimeMin Int      @map("delivery_time_min")
  deliveryTimeMax Int      @map("delivery_time_max")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  address    Address    @relation(fields: [addressId], references: [id], onDelete: Cascade)
  categories Category[]
  orders     Order[]

  @@map("restaurants")
}

model DeliveryPerson {
  id               String                     @id @default(uuid())
  userId           String                     @unique @map("user_id")
  vehicleType      VehicleType                @map("vehicle_type")
  vehiclePlate     String?                    @map("vehicle_plate")
  availability     DeliveryPersonAvailability @default(OFFLINE)
  currentLatitude  Float?                     @map("current_latitude") @db.DoublePrecision
  currentLongitude Float?                     @map("current_longitude") @db.DoublePrecision
  rating           Float?                     @db.DoublePrecision
  totalDeliveries  Int                        @default(0) @map("total_deliveries")
  deliveryRadius   Float                      @default(5.0) @map("delivery_radius")
  createdAt        DateTime                   @default(now()) @map("created_at")
  updatedAt        DateTime                   @updatedAt @map("updated_at")
  lastOnlineAt     DateTime?                  @map("last_online_at")

  // Relationships
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveries Delivery[]

  @@map("delivery_persons")
}

model Address {
  id           String      @id @default(uuid())
  userId       String?     @map("user_id")
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String      @map("postal_code")
  country      String      @default("BR")
  latitude     Float       @db.DoublePrecision
  longitude    Float       @db.DoublePrecision
  isDefault    Boolean     @default(false) @map("is_default")
  type         AddressType
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relationships
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant?
  orders     Order[]

  @@map("addresses")
}

model Category {
  id           String   @id @default(uuid())
  restaurantId String   @map("restaurant_id")
  name         String
  description  String?
  imageUrl     String?  @map("image_url")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems  MenuItem[]

  @@map("categories")
}

model MenuItem {
  id                 String   @id @default(uuid())
  categoryId         String   @map("category_id")
  name               String
  description        String?
  price              Int
  imageUrl           String?  @map("image_url")
  isActive           Boolean  @default(true) @map("is_active")
  isAvailable        Boolean  @default(true) @map("is_available")
  preparationTimeMin Int?     @map("preparation_time_min")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relationships
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("menu_items")
}

model PaymentMethod {
  id                      String      @id @default(uuid())
  userId                  String      @map("user_id")
  type                    PaymentType
  providerPaymentMethodId String      @map("provider_payment_method_id")
  cardHolderName          String?     @map("card_holder_name")
  expiryMonth             String?     @map("expiry_month")
  expiryYear              String?     @map("expiry_year")
  lastFourDigits          String      @map("last_four_digits")
  cardBrand               String?     @map("card_brand")
  isDefault               Boolean     @default(false) @map("is_default")
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime    @updatedAt @map("updated_at")

  // Relationships
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("payment_methods")
}

model Order {
  id                    String           @id @default(uuid())
  customerId            String           @map("customer_id")
  restaurantId          String           @map("restaurant_id")
  deliveryAddressId     String           @map("delivery_address_id")
  paymentType           OrderPaymentType @map("payment_type")
  paymentMethodId       String?          @map("payment_method_id")
  paymentData           Json?            @map("payment_data") @db.JsonB
  status                OrderStatus      @default(PENDING)
  subtotal              Int
  deliveryFee           Int              @map("delivery_fee")
  totalAmount           Int              @map("total_amount")
  notes                 String?
  estimatedDeliveryTime DateTime?        @map("estimated_delivery_time")
  acceptedAt            DateTime?        @map("accepted_at")
  readyAt               DateTime?        @map("ready_at")
  pickedUpAt            DateTime?        @map("picked_up_at")
  deliveredAt           DateTime?        @map("delivered_at")
  cancelledAt           DateTime?        @map("cancelled_at")
  cancellationReason    String?          @map("cancellation_reason")
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")

  // Relationships
  customer        User           @relation("CustomerOrders", fields: [customerId], references: [id])
  restaurant      Restaurant     @relation(fields: [restaurantId], references: [id])
  deliveryAddress Address        @relation(fields: [deliveryAddressId], references: [id])
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  orderItems      OrderItem[]
  delivery        Delivery?
  notifications   Notification[]
  review          Review?

  @@map("orders")
}

model OrderItem {
  id                 String   @id @default(uuid())
  orderId            String   @map("order_id")
  menuItemId         String   @map("menu_item_id")
  productName        String   @map("product_name")
  productDescription String?  @map("product_description")
  productImageUrl    String?  @map("product_image_url")
  quantity           Int
  unitPrice          Int      @map("unit_price")
  totalPrice         Int      @map("total_price")
  notes              String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relationships
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Delivery {
  id               String         @id @default(uuid())
  orderId          String         @unique @map("order_id")
  deliveryPersonId String?        @map("delivery_person_id")
  status           DeliveryStatus @default(PENDING)
  currentLatitude  Float?         @map("current_latitude") @db.DoublePrecision
  currentLongitude Float?         @map("current_longitude") @db.DoublePrecision
  acceptedAt       DateTime?      @map("accepted_at")
  pickedUpAt       DateTime?      @map("picked_up_at")
  deliveredAt      DateTime?      @map("delivered_at")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  // Relationships
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  deliveryPerson DeliveryPerson? @relation(fields: [deliveryPersonId], references: [id])

  @@map("deliveries")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  orderId   String?          @map("order_id")
  type      NotificationType
  title     String?
  message   String?
  isRead    Boolean          @default(false) @map("is_read")
  metadata  String?          @db.Text
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relationships
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Review {
  id                String   @id @default(uuid())
  orderId           String   @unique @map("order_id")
  customerId        String   @map("customer_id")
  restaurantId      String   @map("restaurant_id")
  deliveryPersonId  String?  @map("delivery_person_id")
  restaurantRating  Int      @map("restaurant_rating")
  deliveryRating    Int?     @map("delivery_rating")
  restaurantComment String?  @map("restaurant_comment")
  deliveryComment   String?  @map("delivery_comment")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relationships
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customer User  @relation(fields: [customerId], references: [id])

  @@map("reviews")
}

// Enums
enum DocumentType {
  CPF
  CNPJ
  SSN
  NIF
  DNI
  PASSPORT
  NATIONAL_ID
  OTHER
}

enum DeliveryPersonAvailability {
  AVAILABLE
  BUSY
  OFFLINE
}

enum VehicleType {
  MOTORCYCLE
  BICYCLE
  CAR
}

enum AddressType {
  HOME
  BUSINESS
  RESTAURANT
  OTHER
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
}

enum OrderPaymentType {
  STORED_CARD
  PIX
  CASH
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  PICKED_UP
  DELIVERED
}

enum NotificationType {
  ORDER_CREATED
  ORDER_ACCEPTED
  ORDER_READY
  ORDER_OUT_FOR_DELIVERY
  ORDER_DELIVERED
  ORDER_CANCELLED
  DELIVERY_ASSIGNED
}
